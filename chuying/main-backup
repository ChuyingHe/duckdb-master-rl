/*
#include "duckdb.hpp"
#include <iostream>

using namespace duckdb;

void importcsv(Connection &con) {
	std::cout<< "importcsv()" << std::endl;

    */
/* create table *//*

    con.Query("CREATE TABLE aka_name (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    person_id integer NOT NULL,\n"
              "    name character varying,\n"
              "    imdb_index character varying(3),\n"
              "    name_pcode_cf character varying(11),\n"
              "    name_pcode_nf character varying(11),\n"
              "    surname_pcode character varying(11),\n"
              "    md5sum character varying(65)\n"
              ");\n"
              "\n"
              "CREATE TABLE aka_title (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    title character varying,\n"
              "    imdb_index character varying(4),\n"
              "    kind_id integer NOT NULL,\n"
              "    production_year integer,\n"
              "    phonetic_code character varying(5),\n"
              "    episode_of_id integer,\n"
              "    season_nr integer,\n"
              "    episode_nr integer,\n"
              "    note character varying(72),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE cast_info (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    person_id integer NOT NULL,\n"
              "    movie_id integer NOT NULL,\n"
              "    person_role_id integer,\n"
              "    note character varying,\n"
              "    nr_order integer,\n"
              "    role_id integer NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE char_name (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    name character varying NOT NULL,\n"
              "    imdb_index character varying(2),\n"
              "    imdb_id integer,\n"
              "    name_pcode_nf character varying(5),\n"
              "    surname_pcode character varying(5),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE comp_cast_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    kind character varying(32) NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE company_name (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    name character varying NOT NULL,\n"
              "    country_code character varying(6),\n"
              "    imdb_id integer,\n"
              "    name_pcode_nf character varying(5),\n"
              "    name_pcode_sf character varying(5),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE company_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    kind character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE complete_cast (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer,\n"
              "    subject_id integer NOT NULL,\n"
              "    status_id integer NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE info_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    info character varying(32) NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE keyword (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    keyword character varying NOT NULL,\n"
              "    phonetic_code character varying(5)\n"
              ");\n"
              "\n"
              "CREATE TABLE kind_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    kind character varying(15)\n"
              ");\n"
              "\n"
              "CREATE TABLE link_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    link character varying(32) NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_companies (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    company_id integer NOT NULL,\n"
              "    company_type_id integer NOT NULL,\n"
              "    note character varying\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_info_idx (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    info_type_id integer NOT NULL,\n"
              "    info character varying NOT NULL,\n"
              "    note character varying(1)\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_keyword (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    keyword_id integer NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_link (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    linked_movie_id integer NOT NULL,\n"
              "    link_type_id integer NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE name (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    name character varying NOT NULL,\n"
              "    imdb_index character varying(9),\n"
              "    imdb_id integer,\n"
              "    gender character varying(1),\n"
              "    name_pcode_cf character varying(5),\n"
              "    name_pcode_nf character varying(5),\n"
              "    surname_pcode character varying(5),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE role_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    role character varying(32) NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE title (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    title character varying NOT NULL,\n"
              "    imdb_index character varying(5),\n"
              "    kind_id integer NOT NULL,\n"
              "    production_year integer,\n"
              "    imdb_id integer,\n"
              "    phonetic_code character varying(5),\n"
              "    episode_of_id integer,\n"
              "    season_nr integer,\n"
              "    episode_nr integer,\n"
              "    series_years character varying(49),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_info (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    info_type_id integer NOT NULL,\n"
              "    info character varying NOT NULL,\n"
              "    note character varying\n"
              ");\n"
              "\n"
              "CREATE TABLE person_info (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    person_id integer NOT NULL,\n"
              "    info_type_id integer NOT NULL,\n"
              "    info character varying NOT NULL,\n"
              "    note character varying\n"
              ");");

    std::cout<< "all table created" << std::endl;

    auto result = con.Query("SELECT COUNT(*) FROM aka_name;");
    result->Print();
    */
/* import data from csv *//*

    con.Query("COPY aka_name FROM 'imdb/aka_name.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY aka_title FROM 'imdb/aka_title.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY cast_info FROM 'imdb/cast_info.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY char_name FROM 'imdb/char_name.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY comp_cast_type FROM 'imdb/comp_cast_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY company_name FROM 'imdb/company_name.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY company_type FROM 'imdb/company_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY complete_cast FROM 'imdb/complete_cast.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY info_type FROM 'imdb/info_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY keyword FROM 'imdb/keyword.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY kind_type FROM 'imdb/kind_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY link_type FROM 'imdb/link_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_companies FROM 'imdb/movie_companies.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_info_idx FROM 'imdb/movie_info_idx.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_keyword FROM 'imdb/movie_keyword.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_link FROM 'imdb/movie_link.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY name FROM 'imdb/name.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY role_type FROM 'imdb/role_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY title FROM 'imdb/title.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_info FROM 'imdb/movie_info.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY person_info FROM 'imdb/person_info.csv' (DELIMITER ',', ESCAPE '\\');");

    std::cout<< "copied" << std::endl;

    result = con.Query("SELECT COUNT(*) FROM aka_name;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM aka_title;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM cast_info;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM char_name;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM comp_cast_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM company_name;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM company_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM complete_cast;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM info_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM keyword;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM kind_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM link_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_companies;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_info_idx;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_keyword;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_link;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM name;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM role_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM title;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_info;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM person_info;");
    result->Print();

    std::cout<< "end of importcsv()" << std::endl;

}

int main() {
    std::cout<< "main()" << std::endl;

	DuckDB db(nullptr); // Here it automatically run "Transaction" and "commit" --> these are the 2 extra Queries
	Connection con(db);
    // importcsv(con);
    */
/*con.Query("PRAGMA disable_optimizer");*//*

    con.Query("PRAGMA enable_profiling='json';");
	con.Query("PRAGMA profile_output='/Users/chuyinghe/CLionProjects/duckdb-master/chuying/profiling/profil.json'");

    con.Query("CREATE TABLE integers(i INTEGER);");
	con.Query("INSERT INTO integers VALUES (5);");
    con.Query("INSERT INTO integers VALUES (8);");

    con.Query("CREATE TABLE students(matri INTEGER, nachname STRING, vorname STRING);");
    con.Query("INSERT INTO students VALUES (3, 'He', 'Chuying');");
    con.Query("INSERT INTO students VALUES (5, 'John', 'Doe');");

    con.Query("CREATE TABLE professors(profnr INTEGER, nachname STRING, vorname STRING, lecture STRING);");
	con.Query("INSERT INTO professors VALUES(1, 'Neumann', 'Thomas', 'Query Optimization');");
    con.Query("INSERT INTO professors VALUES(5, 'Martin', 'Bichler', 'IT Consulting');");
    con.Query("INSERT INTO professors VALUES(7, 'James', 'Smith', 'How to be cool');");



	*/
/*test*//*

	*/
/*auto result = con.Query("SELECT * FROM integers");
	result->Print();
    result = con.Query("SELECT * FROM students");
    result->Print();*//*

    auto result = con.Query("SELECT * "
	                        "FROM integers, students, professors "
	                        "WHERE integers.i = students.matri AND professors.profnr = students.matri AND students.nachname = 'John' AND professors.nachname = 'Martin' "
	                        "ORDER BY integers.i");
    result->Print();
}*/
/*
#include "duckdb.hpp"
#include <iostream>

using namespace duckdb;

void importcsv(Connection &con) {
	std::cout<< "importcsv()" << std::endl;

    */
/* create table *//*

    con.Query("CREATE TABLE aka_name (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    person_id integer NOT NULL,\n"
              "    name character varying,\n"
              "    imdb_index character varying(3),\n"
              "    name_pcode_cf character varying(11),\n"
              "    name_pcode_nf character varying(11),\n"
              "    surname_pcode character varying(11),\n"
              "    md5sum character varying(65)\n"
              ");\n"
              "\n"
              "CREATE TABLE aka_title (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    title character varying,\n"
              "    imdb_index character varying(4),\n"
              "    kind_id integer NOT NULL,\n"
              "    production_year integer,\n"
              "    phonetic_code character varying(5),\n"
              "    episode_of_id integer,\n"
              "    season_nr integer,\n"
              "    episode_nr integer,\n"
              "    note character varying(72),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE cast_info (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    person_id integer NOT NULL,\n"
              "    movie_id integer NOT NULL,\n"
              "    person_role_id integer,\n"
              "    note character varying,\n"
              "    nr_order integer,\n"
              "    role_id integer NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE char_name (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    name character varying NOT NULL,\n"
              "    imdb_index character varying(2),\n"
              "    imdb_id integer,\n"
              "    name_pcode_nf character varying(5),\n"
              "    surname_pcode character varying(5),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE comp_cast_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    kind character varying(32) NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE company_name (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    name character varying NOT NULL,\n"
              "    country_code character varying(6),\n"
              "    imdb_id integer,\n"
              "    name_pcode_nf character varying(5),\n"
              "    name_pcode_sf character varying(5),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE company_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    kind character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE complete_cast (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer,\n"
              "    subject_id integer NOT NULL,\n"
              "    status_id integer NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE info_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    info character varying(32) NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE keyword (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    keyword character varying NOT NULL,\n"
              "    phonetic_code character varying(5)\n"
              ");\n"
              "\n"
              "CREATE TABLE kind_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    kind character varying(15)\n"
              ");\n"
              "\n"
              "CREATE TABLE link_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    link character varying(32) NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_companies (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    company_id integer NOT NULL,\n"
              "    company_type_id integer NOT NULL,\n"
              "    note character varying\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_info_idx (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    info_type_id integer NOT NULL,\n"
              "    info character varying NOT NULL,\n"
              "    note character varying(1)\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_keyword (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    keyword_id integer NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_link (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    linked_movie_id integer NOT NULL,\n"
              "    link_type_id integer NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE name (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    name character varying NOT NULL,\n"
              "    imdb_index character varying(9),\n"
              "    imdb_id integer,\n"
              "    gender character varying(1),\n"
              "    name_pcode_cf character varying(5),\n"
              "    name_pcode_nf character varying(5),\n"
              "    surname_pcode character varying(5),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE role_type (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    role character varying(32) NOT NULL\n"
              ");\n"
              "\n"
              "CREATE TABLE title (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    title character varying NOT NULL,\n"
              "    imdb_index character varying(5),\n"
              "    kind_id integer NOT NULL,\n"
              "    production_year integer,\n"
              "    imdb_id integer,\n"
              "    phonetic_code character varying(5),\n"
              "    episode_of_id integer,\n"
              "    season_nr integer,\n"
              "    episode_nr integer,\n"
              "    series_years character varying(49),\n"
              "    md5sum character varying(32)\n"
              ");\n"
              "\n"
              "CREATE TABLE movie_info (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    movie_id integer NOT NULL,\n"
              "    info_type_id integer NOT NULL,\n"
              "    info character varying NOT NULL,\n"
              "    note character varying\n"
              ");\n"
              "\n"
              "CREATE TABLE person_info (\n"
              "    id integer NOT NULL PRIMARY KEY,\n"
              "    person_id integer NOT NULL,\n"
              "    info_type_id integer NOT NULL,\n"
              "    info character varying NOT NULL,\n"
              "    note character varying\n"
              ");");

    std::cout<< "all table created" << std::endl;

    auto result = con.Query("SELECT COUNT(*) FROM aka_name;");
    result->Print();
    */
/* import data from csv *//*

    con.Query("COPY aka_name FROM 'imdb/aka_name.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY aka_title FROM 'imdb/aka_title.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY cast_info FROM 'imdb/cast_info.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY char_name FROM 'imdb/char_name.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY comp_cast_type FROM 'imdb/comp_cast_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY company_name FROM 'imdb/company_name.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY company_type FROM 'imdb/company_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY complete_cast FROM 'imdb/complete_cast.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY info_type FROM 'imdb/info_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY keyword FROM 'imdb/keyword.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY kind_type FROM 'imdb/kind_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY link_type FROM 'imdb/link_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_companies FROM 'imdb/movie_companies.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_info_idx FROM 'imdb/movie_info_idx.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_keyword FROM 'imdb/movie_keyword.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_link FROM 'imdb/movie_link.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY name FROM 'imdb/name.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY role_type FROM 'imdb/role_type.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY title FROM 'imdb/title.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY movie_info FROM 'imdb/movie_info.csv' (DELIMITER ',', ESCAPE '\\');");
    con.Query("COPY person_info FROM 'imdb/person_info.csv' (DELIMITER ',', ESCAPE '\\');");

    std::cout<< "copied" << std::endl;

    result = con.Query("SELECT COUNT(*) FROM aka_name;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM aka_title;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM cast_info;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM char_name;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM comp_cast_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM company_name;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM company_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM complete_cast;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM info_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM keyword;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM kind_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM link_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_companies;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_info_idx;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_keyword;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_link;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM name;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM role_type;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM title;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM movie_info;");
    result->Print();
    result = con.Query("SELECT COUNT(*) FROM person_info;");
    result->Print();

    std::cout<< "end of importcsv()" << std::endl;

}

int main() {
    std::cout<< "main()" << std::endl;

	DuckDB db(nullptr); // Here it automatically run "Transaction" and "commit" --> these are the 2 extra Queries
	Connection con(db);
    // importcsv(con);
    */
/*con.Query("PRAGMA disable_optimizer");*//*

    con.Query("PRAGMA enable_profiling='json';");
	con.Query("PRAGMA profile_output='/Users/chuyinghe/CLionProjects/duckdb-master/chuying/profiling/profil.json'");

    con.Query("CREATE TABLE integers(i INTEGER);");
	con.Query("INSERT INTO integers VALUES (5);");
    con.Query("INSERT INTO integers VALUES (8);");

    con.Query("CREATE TABLE students(matri INTEGER, nachname STRING, vorname STRING);");
    con.Query("INSERT INTO students VALUES (3, 'He', 'Chuying');");
    con.Query("INSERT INTO students VALUES (5, 'John', 'Doe');");

    con.Query("CREATE TABLE professors(profnr INTEGER, nachname STRING, vorname STRING, lecture STRING);");
	con.Query("INSERT INTO professors VALUES(1, 'Neumann', 'Thomas', 'Query Optimization');");
    con.Query("INSERT INTO professors VALUES(5, 'Martin', 'Bichler', 'IT Consulting');");
    con.Query("INSERT INTO professors VALUES(7, 'James', 'Smith', 'How to be cool');");



	*/
/*test*//*

	*/
/*auto result = con.Query("SELECT * FROM integers");
	result->Print();
    result = con.Query("SELECT * FROM students");
    result->Print();*//*

    auto result = con.Query("SELECT * "
	                        "FROM integers, students, professors "
	                        "WHERE integers.i = students.matri AND professors.profnr = students.matri AND students.nachname = 'John' AND professors.nachname = 'Martin' "
	                        "ORDER BY integers.i");
    result->Print();
}*/
